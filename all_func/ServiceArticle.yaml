openapi: 3.0.0
info:
  title: Сервіс Статей
  description: Написати сервіс статей (2000 символів). Статті є публічними для всіх, зареєстровані користувачі можуть редагувати статтю та очікувати на схвалення її модераторами (користувачі із більшими правами). Передбачити варіант редагування, коли стаття на розгляді модератором, а інший користувач її теж редагує. Модератори мають бачити статті, які очікують їх схвалення
  version: 0.0.1
  contact:
    url: "https://github.com/salabay777/pp_project"
servers:
- url: /
tags:
- name: article
  description: Operations about articles
- name: user
  description: Users functions and operations about user
- name: moderator
  description: Moderators functions
- name: updatedArticle
  description: Operations about versions of article
- name: state
  description: Operations about state
paths:  
  /updateArticle:
    post:
      tags:
      - updatedArticle
      summary: Edit created article
      operationId: EditArticle
      requestBody:
        description: Create a new article
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
          application/xml:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        400:
          description: Article body wasn't defined right
          content: {}
      security:
      - ApiKeyAuth: []
    put:
      tags:
      - updatedArticle
      summary: Accept article
      parameters:
      - name: ArticleId
        in: query
        description: Article ID to delete
        required: true
        schema:
          type: integer
          format: int64
      - name: ModeratorKey
        in: query
        description: Moderators key for accept or delete article
        required: true
        schema:
          type: string
      - name: Date
        in: query
        description: Date update of article
        required: true
        schema:
          type: string
          format: date
      responses:
        200:
          description:  Article succeful accepted 
          content:
            applicationsArticle/json:
              schema:
                $ref: '#/components/schemas/UpdatedArticle'
            applicationArticle/xml:
               schema:
                $ref: '#/components/schemas/UpdatedArticle'
        404:
          description: Entered ArticleID does not exist
          content: {}
        400:
          description: Invalid moderator key 
          content: {}
        402:
          description: A bad date was supplied
      security:
      - ApiKeyAuth: []
  /updateArticle/{ArticleId}:
    get:
      tags:
      - updatedArticle
      summary: Get versions of article
      parameters:
      - name: ArticleId
        in: path
        description: ID of Article to found
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
              applicationUpdatedArticle/xml:
                schema:
                  $ref: '#/components/schemas/UpdatedArticle'
              applicationUpdatedArticle/json:
                schema:
                  $ref: '#/components/schemas/UpdatedArticle'
        400:
          description: Invalid ArticleId supplied
        404:
          description: A articles versions with provided ID was not found
      security:
      - ApiKeyAuth: [] 
  /state:
    post:
      tags:
      - state
      summary: Add a new state
      operationId: addState
      requestBody:
        description: Create a new state
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/State'
          application/xml:
            schema:
              $ref: '#/components/schemas/State'
        required: true
      responses:
        200:
          description: state was successfully added
        400:
          description: state with such name already exists
        404:
          description: Body wasn't defined
          content: {}
      security:
      - ApiKeyAuth: []
      x-codegen-request-body-name: body
  /state/{StateId}:
    get:
      tags:
      - state
      summary: Get state
      parameters:
      - name: StateId
        in: path
        description: ID of State to found
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        400:
          description: Invalid stateId supplied
        404:
          description: A state with provided ID was not found
    delete:
      tags:
      - state
      summary: Delete a State
      operationId: deleteState
      parameters:
      - name: StateId
        in: path
        description: State ID to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: state was successfully deleted
        400:
          description: Invalid stateId supplied
        404:
          description: A state with provided ID was not found
      security:
      - ApiKeyAuth: []
  /article:
    post:
      tags:
      - article
      summary: Add a new article
      operationId: addArticle
      requestBody:
        description: Create a new article
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
          application/xml:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        200:
          description: article was successfully added
        400:
          description: Body wasn't defined right
        404:
          description: Selected ID is already in use
      security:
      - ApiKeyAuth: []
  /article/{ArticleId}:
    get:
      tags:
      - article
      summary: Get article to read
      parameters:
      - name: ArticleId
        in: path
        description: ID of Article to found
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
        404:
          description: A article with provided ID was not found
        400:
          description: Entered ID does not right 
    delete:
      tags:
      - article
      summary: Delete a Article
      operationId: deleteArticle
      parameters:
      - name: ArticleId
        in: path
        description: Article ID to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: article was successfully deleted
        400:
          description: Invalid articleId supplied
          content: {}
        404:
          description: A article with provided ID was not found
          content: {}
      security:
      - ApiKeyAuth: []
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the unlogged in user
      operationId: createUser
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          description: successful operation
        400:
          description: body wasn't defined right
        404:
          description: user with such username already exists
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{userId}:
    get:
      tags:
      - user
      summary: Get user by user id
      operationId: getUserByID
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid userId supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
      - ApiKeyAuth: []
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user
      operationId: deleteUser
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: User was successfully deleted
        400:
          description: Invalid userID supplied
        404:
          description: User not found
      security:
      - ApiKeyAuth: [] 
  /moderator:
    post:
      tags:
      - moderator
      summary: Create moderator
      description: This can only be done by the logged in user.
      operationId: createModerator
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Moderator'
          application/xml:
            schema:
              $ref: '#/components/schemas/Moderator'
        required: true
      responses:
        200:
          description: successful operation
          content: {}
        404:
          description: Moderator with such moderatorname already exists
        400:
          description: Body wasn't defined right
      x-codegen-request-body-name: body
      security:
      - ApiKeyAuth: []
  /moderator/login/{ModeratorKey}:
    get:
      tags:
      - moderator
      summary: Logs moderator into the system
      operationId: loginModerator
      parameters:
      - name: ModeratorKey
        in: path
        description: You can login as a moderator only with a key
        required: true
        schema:
          type: string
      - name: moderatorname
        in: query
        description: The moderator name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
      security:
      - ApiKeyAuth: []
  /moderator/logout/{ModeratorKey}:
    get:
      tags:
      - moderator
      summary: Logs out current logged in moderator session
      operationId: logoutModerator
      parameters:
      - name: ModeratorKey
        in: path
        description: You can logout as a moderator only with a key
        required: true
        schema:
          type: string
      responses:
        default:
          description: successful operation
          content: {}
      security:
      - ApiKeyAuth: []
components:
  schemas:
    Moderator:
      type: object
      properties:
        id:
          type: integer
          format: int64
        moderatorname:
          type: string
          example: moder
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Price
        email:
          type: string
          example: moderator@email.com
        password:
          type: string
          example: somepassword
        moderatorkey:
          type: string
          example: D9YH63Lk3Vx7drr
      xml:
        name: Moderator
    State:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Moderator
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          example: user
        firstName:
          type: string
          example: Francic
        lastName:
          type: string
          example: Underwood
        email:
          type: string
          example: user@email.com
        password:
          type: string
          example: anothersomepassword

      xml:
        name: User
    Article:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: Einstein's theory of relativity
        body:
          type: string
          example: Something about the theory of relativity
        version:
          type: string
          example: 0.0.1
    UpdatedArticle:
      type: object
      properties:
        ArticleId:
          type: integer
          format: int64
        UserId:
          type: integer
          format: int64
        ArticleBody:
          type: string
        date:
          type: string
        state:
          type: string
      xml:
        name: Article
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: API-Key
      in: header